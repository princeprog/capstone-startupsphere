/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * SphereFinVest API
 * API documentation for StartupVest, FinEase, and StartupSphere
 * OpenAPI spec version: 1.0
 */
import type { AxiosRequestConfig, AxiosResponse } from "axios";
import axios from "axios";
import type {
  Activity,
  Bookmark,
  CapTableInvestor,
  CapTableInvestorControllerFindAllInvestorsParams,
  CapTableInvestorControllerGetInvestorRequests200Item,
  CapTableInvestorControllerGetTopInvestorByCapTable200,
  FundingRound,
  FundingRoundControllerGetAllInvestorDataByEachCompany200Item,
  FundingRoundControllerGetCompanyMonthlyFunding200,
  FundingRoundControllerGetCompanyMonthlyFundingParams,
  FundingRoundControllerGetInvestorsByIdsParams,
  FundingRoundControllerGetMonthlyFunding200,
  FundingRoundControllerGetMonthlyFundingParams,
  Investor,
  InvestorsControllerCreate201,
  InvestorsControllerGetInvestorsByIdsParams,
  Like,
  Report,
  Startup,
  StartupsControllerCreate201,
  User,
  UsersControllerGetUserRegistrationsByMonth200,
  UsersControllerGetUserRegistrationsByMonthParams,
  UsersControllerLogin201,
  UsersControllerVerifyPostEmailParams,
  View,
} from "../schemas";

export const profilePictureControllerUploadProfilePicture = <TData = AxiosResponse<void>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/${userId}/upload`,
    undefined,
    options
  );
};

export const profilePictureControllerGetProfilePicture = <TData = AxiosResponse<void>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/${userId}`, options);
};

export const profilePictureControllerUpdateProfilePicture = <TData = AxiosResponse<void>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/${userId}`,
    undefined,
    options
  );
};

export const profilePictureControllerUploadStartupProfilePicture = <TData = AxiosResponse<void>>(
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/startup/${startupId}/upload`,
    undefined,
    options
  );
};

export const profilePictureControllerUploadInvestorProfilePicture = <TData = AxiosResponse<void>>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/investor/${investorId}/upload`,
    undefined,
    options
  );
};

export const profilePictureControllerGetStartupProfilePicture = <TData = AxiosResponse<void>>(
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/startup/${startupId}`,
    options
  );
};

export const profilePictureControllerGetInvestorProfilePicture = <TData = AxiosResponse<void>>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/investor/${investorId}`,
    options
  );
};

export const profilePictureControllerUpdateStartupProfilePicture = <TData = AxiosResponse<void>>(
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/startup/${startupId}/update`,
    undefined,
    options
  );
};

export const profilePictureControllerUpdateInvestorProfilePicture = <TData = AxiosResponse<void>>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/profile-picture/investor/${investorId}/update`,
    undefined,
    options
  );
};

export const usersControllerRegister = <TData = AxiosResponse<void>>(
  data?: any,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/register`, data, options);
};

export const usersControllerFindAll = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users`, options);
};

export const usersControllerLogin = <TData = AxiosResponse<UsersControllerLogin201>>(
  data?: any,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/login`, data, options);
};

export const usersControllerVerifyPostEmail = <TData = AxiosResponse<string>>(
  params: UsersControllerVerifyPostEmailParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/verify-email`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const usersControllerVerifyEmail = <TData = AxiosResponse<string>>(
  token: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/verify/${token}`, options);
};

export const usersControllerCheckEmail = <TData = AxiosResponse<void>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/check-email`, undefined, options);
};

export const usersControllerGetProfile = <TData = AxiosResponse<User>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/profile`, options);
};

export const usersControllerUpdate = <TData = AxiosResponse<User>>(
  id: string,
  user: User,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/${id}`, user, options);
};

export const usersControllerGetCurrentUser = <TData = AxiosResponse<User>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/current`, options);
};

export const usersControllerFindAllUsers = <TData = AxiosResponse<User[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/all`, options);
};

export const usersControllerGetUserRegistrationsByMonth = <
  TData = AxiosResponse<UsersControllerGetUserRegistrationsByMonth200>,
>(
  params: UsersControllerGetUserRegistrationsByMonthParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/registrations-by-month`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const usersControllerForgotPassword = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/users/forgot-password`,
    undefined,
    options
  );
};

export const usersControllerVerifyOtp = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/users/verify-otp`, undefined, options);
};

export const usersControllerResetPassword = <TData = AxiosResponse<string>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/users/reset-password`,
    undefined,
    options
  );
};

export const startupsControllerCreate = <TData = AxiosResponse<StartupsControllerCreate201>>(
  startup: Startup,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/startups/create`, startup, options);
};

export const startupsControllerFindAll = <TData = AxiosResponse<Startup[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/startups`, options);
};

export const startupsControllerFindAllStartups = <TData = AxiosResponse<Startup[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/startups/all`, options);
};

export const startupsControllerFindOne = <TData = AxiosResponse<Startup>>(
  id: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/startups/${id}/funding-rounds`, options);
};

export const startupsControllerUpdate = <TData = AxiosResponse<Startup>>(
  id: number,
  startup: Startup,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(`${process.env.NEXT_PUBLIC_BACKEND_URL}/startups/${id}`, startup, options);
};

export const startupsControllerSoftDelete = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/startups/${id}/delete`,
    undefined,
    options
  );
};

export const investorsControllerCreate = <TData = AxiosResponse<InvestorsControllerCreate201>>(
  investor: Investor,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/create`, investor, options);
};

export const investorsControllerFindAllCreatedUser = <TData = AxiosResponse<Investor[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors`, options);
};

export const investorsControllerFindAllInvestors = <TData = AxiosResponse<Investor[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/all`, options);
};

export const investorsControllerGetInvestorIds = <TData = AxiosResponse<number[]>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/${userId}/ids`, options);
};

export const investorsControllerGetInvestorsByIds = <TData = AxiosResponse<Investor[]>>(
  params: InvestorsControllerGetInvestorsByIdsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/by-ids`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const investorsControllerFindByIds = <TData = AxiosResponse<Investor[]>>(
  ids: string[],
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/${ids}`, options);
};

export const investorsControllerFindOne = <TData = AxiosResponse<Investor>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/${id}`, options);
};

export const investorsControllerUpdate = <TData = AxiosResponse<Investor>>(
  id: number,
  investor: Investor,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(`${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/${id}`, investor, options);
};

export const investorsControllerSoftDelete = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/investors/${id}/delete`,
    undefined,
    options
  );
};

export const fundingRoundControllerGetInvestorsByIds = <TData = AxiosResponse<Investor[]>>(
  params: FundingRoundControllerGetInvestorsByIdsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/by-ids`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const fundingRoundControllerCreateFundingRound = <TData = AxiosResponse<FundingRound>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/createfund`,
    undefined,
    options
  );
};

export const fundingRoundControllerFindAll = <TData = AxiosResponse<FundingRound[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/all`, options);
};

export const fundingRoundControllerFindById = <TData = AxiosResponse<FundingRound>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${id}`, options);
};

export const fundingRoundControllerUpdateFundingRound = <TData = AxiosResponse<FundingRound>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${id}`,
    undefined,
    options
  );
};

export const fundingRoundControllerSoftDeleteFundingRound = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${id}/delete`,
    undefined,
    options
  );
};

export const fundingRoundControllerGetTotalMoneyRaisedForStartup = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${id}/total-money-raised`,
    options
  );
};

export const fundingRoundControllerGetTotalSharesForInvestor = <TData = AxiosResponse<number>>(
  investorId: number,
  companyId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${investorId}/company/${companyId}/total-shares`,
    options
  );
};

export const fundingRoundControllerGetAllInvestorsDataOfAllTheCompany = <
  TData = AxiosResponse<void>,
>(
  companyId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${companyId}/investors/all`,
    options
  );
};

export const fundingRoundControllerGetAllInvestorDataByEachCompany = <
  TData = AxiosResponse<FundingRoundControllerGetAllInvestorDataByEachCompany200Item[]>,
>(
  companyId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/investors/company/${companyId}`,
    options
  );
};

export const fundingRoundControllerGetMonthlyFunding = <
  TData = AxiosResponse<FundingRoundControllerGetMonthlyFunding200>,
>(
  userId: number,
  params: FundingRoundControllerGetMonthlyFundingParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/monthly-funding/${userId}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const fundingRoundControllerGetCompanyMonthlyFunding = <
  TData = AxiosResponse<FundingRoundControllerGetCompanyMonthlyFunding200>,
>(
  companyId: number,
  params: FundingRoundControllerGetCompanyMonthlyFundingParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/company-monthly-funding/${companyId}`,
    {
      ...options,
      params: { ...params, ...options?.params },
    }
  );
};

export const fundingRoundControllerInvest = <TData = AxiosResponse<void>>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${id}/investment`,
    undefined,
    options
  );
};

export const fundingRoundControllerUpdateInvestmentStatus = <
  TData = AxiosResponse<CapTableInvestor>,
>(
  id: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/funding-rounds/${id}/status`,
    undefined,
    options
  );
};

export const capTableInvestorControllerFindAll = <TData = AxiosResponse<CapTableInvestor[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/cap-table-investor`, options);
};

export const capTableInvestorControllerFindAllInvestors = <
  TData = AxiosResponse<CapTableInvestor[]>,
>(
  params: CapTableInvestorControllerFindAllInvestorsParams,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/cap-table-investor/all`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const capTableInvestorControllerGetInvestorRequests = <
  TData = AxiosResponse<CapTableInvestorControllerGetInvestorRequests200Item[]>,
>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/cap-table-investor/investor-requests/${investorId}`,
    options
  );
};

export const capTableInvestorControllerGetInvestorInformation = <
  TData = AxiosResponse<CapTableInvestor[]>,
>(
  capTableId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/cap-table-investor/${capTableId}`,
    options
  );
};

export const capTableInvestorControllerGetTopInvestorByCapTable = <
  TData = AxiosResponse<CapTableInvestorControllerGetTopInvestorByCapTable200>,
>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/cap-table-investor/${userId}/top`,
    options
  );
};

export const capTableInvestorControllerRemoveInvestor = <TData = AxiosResponse<void>>(
  investorId: number,
  capTableId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/cap-table-investor/${investorId}/${capTableId}`,
    undefined,
    options
  );
};

export const activityControllerCreateActivity = <TData = AxiosResponse<Activity>>(
  activity: Activity,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/activities`, activity, options);
};

export const activityControllerFindAll = <TData = AxiosResponse<Activity[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/activities`, options);
};

export const activityControllerFindOne = <TData = AxiosResponse<Activity>>(
  id: string,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/activities/${id}`, options);
};

export const bookmarkControllerGetAll = <TData = AxiosResponse<Bookmark[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks`, options);
};

export const bookmarkControllerCreate = <TData = AxiosResponse<void>>(
  data?: any,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks`, data, options);
};

export const bookmarkControllerFindAllByUserId = <TData = AxiosResponse<Bookmark[]>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${userId}`, options);
};

export const bookmarkControllerStartupRemove = <TData = AxiosResponse<void>>(
  userId: number,
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${userId}/startup/${startupId}`,
    options
  );
};

export const bookmarkControllerFindOneByUserIdandStartupId = <TData = AxiosResponse<Bookmark>>(
  userId: number,
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${userId}/startup/${startupId}`,
    options
  );
};

export const bookmarkControllerInvestorRemove = <TData = AxiosResponse<void>>(
  userId: number,
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${userId}/investor/${investorId}`,
    options
  );
};

export const bookmarkControllerFindOneByUserIdandInvestorId = <TData = AxiosResponse<Bookmark>>(
  userId: number,
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${userId}/investor/${investorId}`,
    options
  );
};

export const bookmarkControllerFindallByStartupId = <TData = AxiosResponse<Bookmark[]>>(
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${startupId}`, options);
};

export const bookmarkControllerFindAllByInvestorId = <TData = AxiosResponse<Bookmark[]>>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/bookmarks/${investorId}`, options);
};

export const likeControllerGetAll = <TData = AxiosResponse<Like[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/likes`, options);
};

export const likeControllerCreate = <TData = AxiosResponse<void>>(
  data?: any,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/likes`, data, options);
};

export const likeControllerStartupRemove = <TData = AxiosResponse<void>>(
  userId: number,
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/likes/${userId}/startup/${startupId}`,
    options
  );
};

export const likeControllerFindOneByUserIdandStartupId = <TData = AxiosResponse<Like>>(
  userId: number,
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/likes/${userId}/startup/${startupId}`,
    options
  );
};

export const likeControllerInvestorRemove = <TData = AxiosResponse<void>>(
  userId: number,
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/likes/${userId}/investor/${investorId}`,
    options
  );
};

export const likeControllerFindOneByUserIdandInvestorId = <TData = AxiosResponse<Like>>(
  userId: number,
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/likes/${userId}/investor/${investorId}`,
    options
  );
};

export const likeControllerFindallByStartupId = <TData = AxiosResponse<Like[]>>(
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/likes/${startupId}`, options);
};

export const likeControllerFindAllByInvestorId = <TData = AxiosResponse<Like[]>>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/likes/${investorId}`, options);
};

export const reportControllerGetAll = <TData = AxiosResponse<Report[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/reports`, options);
};

export const reportControllerCreate = <TData = AxiosResponse<Report>>(
  data?: any,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/reports`, data, options);
};

export const reportControllerGetOneById = <TData = AxiosResponse<Report>>(
  reportId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/reports/${reportId}`, options);
};

export const reportControllerUpdate = <TData = AxiosResponse<Report>>(
  reportId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.put(
    `${process.env.NEXT_PUBLIC_BACKEND_URL}/reports/${reportId}`,
    undefined,
    options
  );
};

export const reportControllerDelete = <TData = AxiosResponse<unknown>>(
  reportId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.delete(`${process.env.NEXT_PUBLIC_BACKEND_URL}/reports/${reportId}`, options);
};

export const reportControllerGetAllByUserId = <TData = AxiosResponse<Report[]>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/reports/user/${userId}`, options);
};

export const viewControllerCreate = <TData = AxiosResponse<void>>(
  data?: any,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.post(`${process.env.NEXT_PUBLIC_BACKEND_URL}/views`, data, options);
};

export const viewControllerGetAll = <TData = AxiosResponse<View[]>>(
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/views`, options);
};

export const viewControllerFindRecentsByUserId = <TData = AxiosResponse<View[]>>(
  userId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/views/${userId}`, options);
};

export const viewControllerFindAllByStartupId = <TData = AxiosResponse<View[]>>(
  startupId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/views/startup/${startupId}`, options);
};

export const viewControllerFindAllByInvestorId = <TData = AxiosResponse<View[]>>(
  investorId: number,
  options?: AxiosRequestConfig
): Promise<TData> => {
  return axios.get(`${process.env.NEXT_PUBLIC_BACKEND_URL}/views/investor/${investorId}`, options);
};

export type ProfilePictureControllerUploadProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerGetProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerUpdateProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerUploadStartupProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerUploadInvestorProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerGetStartupProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerGetInvestorProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerUpdateStartupProfilePictureResult = AxiosResponse<void>;
export type ProfilePictureControllerUpdateInvestorProfilePictureResult = AxiosResponse<void>;
export type UsersControllerRegisterResult = AxiosResponse<void>;
export type UsersControllerFindAllResult = AxiosResponse<string>;
export type UsersControllerLoginResult = AxiosResponse<UsersControllerLogin201>;
export type UsersControllerVerifyPostEmailResult = AxiosResponse<string>;
export type UsersControllerVerifyEmailResult = AxiosResponse<string>;
export type UsersControllerCheckEmailResult = AxiosResponse<void>;
export type UsersControllerGetProfileResult = AxiosResponse<User>;
export type UsersControllerUpdateResult = AxiosResponse<User>;
export type UsersControllerGetCurrentUserResult = AxiosResponse<User>;
export type UsersControllerFindAllUsersResult = AxiosResponse<User[]>;
export type UsersControllerGetUserRegistrationsByMonthResult =
  AxiosResponse<UsersControllerGetUserRegistrationsByMonth200>;
export type UsersControllerForgotPasswordResult = AxiosResponse<string>;
export type UsersControllerVerifyOtpResult = AxiosResponse<string>;
export type UsersControllerResetPasswordResult = AxiosResponse<string>;
export type StartupsControllerCreateResult = AxiosResponse<StartupsControllerCreate201>;
export type StartupsControllerFindAllResult = AxiosResponse<Startup[]>;
export type StartupsControllerFindAllStartupsResult = AxiosResponse<Startup[]>;
export type StartupsControllerFindOneResult = AxiosResponse<Startup>;
export type StartupsControllerUpdateResult = AxiosResponse<Startup>;
export type StartupsControllerSoftDeleteResult = AxiosResponse<void>;
export type InvestorsControllerCreateResult = AxiosResponse<InvestorsControllerCreate201>;
export type InvestorsControllerFindAllCreatedUserResult = AxiosResponse<Investor[]>;
export type InvestorsControllerFindAllInvestorsResult = AxiosResponse<Investor[]>;
export type InvestorsControllerGetInvestorIdsResult = AxiosResponse<number[]>;
export type InvestorsControllerGetInvestorsByIdsResult = AxiosResponse<Investor[]>;
export type InvestorsControllerFindByIdsResult = AxiosResponse<Investor[]>;
export type InvestorsControllerFindOneResult = AxiosResponse<Investor>;
export type InvestorsControllerUpdateResult = AxiosResponse<Investor>;
export type InvestorsControllerSoftDeleteResult = AxiosResponse<void>;
export type FundingRoundControllerGetInvestorsByIdsResult = AxiosResponse<Investor[]>;
export type FundingRoundControllerCreateFundingRoundResult = AxiosResponse<FundingRound>;
export type FundingRoundControllerFindAllResult = AxiosResponse<FundingRound[]>;
export type FundingRoundControllerFindByIdResult = AxiosResponse<FundingRound>;
export type FundingRoundControllerUpdateFundingRoundResult = AxiosResponse<FundingRound>;
export type FundingRoundControllerSoftDeleteFundingRoundResult = AxiosResponse<void>;
export type FundingRoundControllerGetTotalMoneyRaisedForStartupResult = AxiosResponse<void>;
export type FundingRoundControllerGetTotalSharesForInvestorResult = AxiosResponse<number>;
export type FundingRoundControllerGetAllInvestorsDataOfAllTheCompanyResult = AxiosResponse<void>;
export type FundingRoundControllerGetAllInvestorDataByEachCompanyResult = AxiosResponse<
  FundingRoundControllerGetAllInvestorDataByEachCompany200Item[]
>;
export type FundingRoundControllerGetMonthlyFundingResult =
  AxiosResponse<FundingRoundControllerGetMonthlyFunding200>;
export type FundingRoundControllerGetCompanyMonthlyFundingResult =
  AxiosResponse<FundingRoundControllerGetCompanyMonthlyFunding200>;
export type FundingRoundControllerInvestResult = AxiosResponse<void>;
export type FundingRoundControllerUpdateInvestmentStatusResult = AxiosResponse<CapTableInvestor>;
export type CapTableInvestorControllerFindAllResult = AxiosResponse<CapTableInvestor[]>;
export type CapTableInvestorControllerFindAllInvestorsResult = AxiosResponse<CapTableInvestor[]>;
export type CapTableInvestorControllerGetInvestorRequestsResult = AxiosResponse<
  CapTableInvestorControllerGetInvestorRequests200Item[]
>;
export type CapTableInvestorControllerGetInvestorInformationResult = AxiosResponse<
  CapTableInvestor[]
>;
export type CapTableInvestorControllerGetTopInvestorByCapTableResult =
  AxiosResponse<CapTableInvestorControllerGetTopInvestorByCapTable200>;
export type CapTableInvestorControllerRemoveInvestorResult = AxiosResponse<void>;
export type ActivityControllerCreateActivityResult = AxiosResponse<Activity>;
export type ActivityControllerFindAllResult = AxiosResponse<Activity[]>;
export type ActivityControllerFindOneResult = AxiosResponse<Activity>;
export type BookmarkControllerGetAllResult = AxiosResponse<Bookmark[]>;
export type BookmarkControllerCreateResult = AxiosResponse<void>;
export type BookmarkControllerFindAllByUserIdResult = AxiosResponse<Bookmark[]>;
export type BookmarkControllerStartupRemoveResult = AxiosResponse<void>;
export type BookmarkControllerFindOneByUserIdandStartupIdResult = AxiosResponse<Bookmark>;
export type BookmarkControllerInvestorRemoveResult = AxiosResponse<void>;
export type BookmarkControllerFindOneByUserIdandInvestorIdResult = AxiosResponse<Bookmark>;
export type BookmarkControllerFindallByStartupIdResult = AxiosResponse<Bookmark[]>;
export type BookmarkControllerFindAllByInvestorIdResult = AxiosResponse<Bookmark[]>;
export type LikeControllerGetAllResult = AxiosResponse<Like[]>;
export type LikeControllerCreateResult = AxiosResponse<void>;
export type LikeControllerStartupRemoveResult = AxiosResponse<void>;
export type LikeControllerFindOneByUserIdandStartupIdResult = AxiosResponse<Like>;
export type LikeControllerInvestorRemoveResult = AxiosResponse<void>;
export type LikeControllerFindOneByUserIdandInvestorIdResult = AxiosResponse<Like>;
export type LikeControllerFindallByStartupIdResult = AxiosResponse<Like[]>;
export type LikeControllerFindAllByInvestorIdResult = AxiosResponse<Like[]>;
export type ReportControllerGetAllResult = AxiosResponse<Report[]>;
export type ReportControllerCreateResult = AxiosResponse<Report>;
export type ReportControllerGetOneByIdResult = AxiosResponse<Report>;
export type ReportControllerUpdateResult = AxiosResponse<Report>;
export type ReportControllerDeleteResult = AxiosResponse<unknown>;
export type ReportControllerGetAllByUserIdResult = AxiosResponse<Report[]>;
export type ViewControllerCreateResult = AxiosResponse<void>;
export type ViewControllerGetAllResult = AxiosResponse<View[]>;
export type ViewControllerFindRecentsByUserIdResult = AxiosResponse<View[]>;
export type ViewControllerFindAllByStartupIdResult = AxiosResponse<View[]>;
export type ViewControllerFindAllByInvestorIdResult = AxiosResponse<View[]>;
